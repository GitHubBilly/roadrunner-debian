#!/usr/bin/env bash
#
# @(#) redirect-web-ports
#
# Copyright Â© 2020, Revolution Robotics, Inc.
#
# This script enables or disables redirection of web ports.
#
# When enabling redirection and the file `/etc/iptables/rules.v4' does
# not exist, that file with the redirection rules (and only these) is
# generated. In particular, the output of `iptables-save' is not used,
# since there may exist dynamic rules that should not persist between
# reboots.
#
# When enabling redirection and file `/etc/iptables/rules.v4' already
# exists, that file is not modified. In the event that the existing
# file does not (appear to) contain the redirection rules, an error is
# reported and the script exists with non-zero status.
#
# When disabling redirection and the file `/etc/iptables/rules.v4'
# exists, if it is essentially the same as the one generated by this
# script, then it is removed. Otherwise, any web port redirection
# rules are stripped from the file.

script_name=${0##*/}

: ${IPTABLES_SAVE:='/sbin/iptables-save'}
: ${IPTABLES:='/sbin/iptables'}
: ${RULES_V4:='/etc/iptables/rules.v4'}

declare -r DEFAULT_REDIRECTION_PORT=9090

usage ()
{
    echo "Usage: $script_name enable|disable|status [dest-port]" >&2
    exit
}

count_redirections ()
{
    local file=$1

    if test ."$file" = .''; then
        sudo $IPTABLES_SAVE |
            egrep -c -- '--dport (80|443) -j REDIRECT'
    elif test -e "$file"; then
        egrep -c 'port (80|443) -j REDIRECT' "$file"
    else
        echo 0
    fi
}

generate_rules_v4 ()
{
    local tmpfile=$(tempfile)
    local timestamp=$(date +'%a %b %e %T %Y')
    local version=$(iptables-save --version | awk '{ print $2 }')

    cat >"$tmpfile" << EOF
# Generated by xtables-save $version on $timestamp
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A PREROUTING -p tcp -m tcp --dport 80 -j REDIRECT --to-ports $destination_port
-A PREROUTING -p tcp -m tcp --dport 443 -j REDIRECT --to-ports $destination_port
COMMIT
# Completed on $timestamp
EOF
    echo "$tmpfile"
}

enable_web_port_redirection ()
{
    case $(count_redirections) in
        0)
            sudo $IPTABLES -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports $destination_port
            sudo $IPTABLES -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports $destination_port
            ;;
        *)
            : Nothing to do
            ;;
    esac

    if test ! -f "$RULES_V4" || test ! -s "$RULES_V4"; then
        sudo install -d "${RULES_V4%/*}"
        sudo install -m 0644 "$(generate_rules_v4)" "$RULES_V4"
    elif test -s "$RULES_V4" && (( $(count_redirections "$RULES_V4") > 0 )); then
        : Nothing to do
    else
        echo "$script_name: $RULES_V4: Missing redirections"
        exit 1
    fi
}

disable_web_port_redirection ()
{
    case $(count_redirections) in
        0)
            : Nothing to do
            ;;
        *)
            sudo $IPTABLES -t nat -D PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports $destination_port
            sudo $IPTABLES -t nat -D PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports $destination_port
            ;;
    esac


    if test ! -f "$RULES_V4" || test ! -s "$RULES_V4"; then
        : Nothing to do
    elif test -s "$RULES_V4" && (( $(count_redirections "$RULES_V4") > 0 )); then
        local tmpfile=$(generate_rules_v4)

        # if existing rules.v4 and generated are the same...
        if test ."$(diff -u <(grep -v ^# "$RULES_V4") <(grep -v ^# "$tmpfile"))" = .''; then
            sudo rm "$RULES_V4"
        else
            egrep -v -- '--dport (80|443) -j REDIRECT --to-ports' "$RULES_V4" >"$tmpfile"
            sudo install -m 0644 "$tmpfile" "$RULES_V4"
        fi
    fi
}

web_port_redirection_status ()
{
    case $(count_redirections) in
        0)
            echo "Web ports are not currently redirected."
            ;;
        *)
            sudo $IPTABLES_SAVE |
                egrep -o  -- '--dport (80|443) -j REDIRECT --to-ports [0-9]+' |
                awk '{ print $2 " -> " $NF }'
            ;;
    esac
}

declare request=$1
declare destination_port=$2

declare -i redirection_count=$(count_redirections)
declare active_destination_port=$(
    sudo $IPTABLES_SAVE |
        egrep -m1 -- '--dport (80|443) -j REDIRECT' |
        awk '{ print $NF }'
        )

if [[ ! ."$destination_port" =~ \.[0-9]*$ ]]; then
    usage
fi

if [[ ."$request" =~ \.-{0,2}([yY]|[tT]|[eE]) ]]; then
    case $# in
        1)
            if test ."$active_destination_port" = .''; then
                destination_port=$DEFAULT_REDIRECTION_PORT
            else
                echo "Web ports are already redirected." >&2
                exit
            fi
            ;;
        2)
            if test ."$destination_port" = .''; then
                destination_port=$DEFAULT_REDIRECTION_PORT
            else
                if test ."$destination_port" = ."$active_destination_port"; then
                    echo "Web ports are already redirected." >&2
                else
                    $script_name disable $active_destination_port
                fi
            fi
            ;;
    esac
    enable_web_port_redirection
elif [[ ."$request" =~ \.-{0,2}([nN]|[fF]|[dD]) ]]; then
    if test ."$active_destination_port" = .''; then
        echo "Web ports are not currently redirected." >&2
        exit
    fi

    case $# in
        1)
            destination_port=$active_destination_port
            ;;
        2)
            if test ."$destination_port" = .''; then
                destination_port=$active_destination_port
            elif test ."$destination_port" != ."$active_destination_port"; then
                echo "$script_name: $active_destination_port: Redirection port mismatch." >&2
                exit 1
            fi
            ;;
    esac
    disable_web_port_redirection
elif [[ ."$request" =~ \.-{0,2}([sS]) ]]; then
    web_port_redirection_status
else
    usage
fi
